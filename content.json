{"meta":{"title":"Jackson Liu","subtitle":null,"description":"好少年光芒万丈","author":"jackson liu","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-07-14T00:16:22.021Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-07-14T00:16:24.725Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-07-14T00:16:31.812Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-07-14T00:16:34.141Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-07-14T00:16:36.460Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-07-14T00:16:38.567Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura 主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-07-14T01:25:44.562Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-07-14T08:09:59.156Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-07-14T00:16:47.110Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-07-14T00:16:48.843Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-07-14T00:16:50.683Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo 主题 Sakura 修改自 WordPress 主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-07-14T00:16:52.993Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"画一只会动的皮卡丘(下）","slug":"pikachu02","date":"2020-07-15T00:18:14.000Z","updated":"2020-07-15T00:25:09.768Z","comments":true,"path":"2020/07/15/pikachu02/","link":"","permalink":"/2020/07/15/pikachu02/","excerpt":"","text":"！精品网站推荐： 一个喜欢开发的小玩意的网站： https://codepen.io/项目预览地址：https://jackson01.gitee.io/pikachu/本篇清单 List1. 页面布局 2. 动态生成代码与皮卡丘style 3. 3.实现速度的控制 上篇中我们已经实现了静态的皮卡丘，我们需要让他动起来。 1.页面的布局这里我们把屏幕分为上下两块。下面为预览皮卡丘的区域，上面为代码动态生成的区域&lt;div class=&quot;code-wrapper&quot;&gt;&lt;pre id=&quot;code&quot;&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;preview-wrapper&quot;&gt; &lt;div class=&quot;preview&quot;&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;nose&quot;&gt;&lt;/div&gt; &lt;div class=&quot;eye left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;eye right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;upperLip left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;upperLip right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;lowerLip-wrapper&quot;&gt; &lt;div class=&quot;lowerLip&quot;&gt; &lt;div class=&quot;tongue&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 注意上面的代码动态生成区域的盒子要用到 标签， 因为我们要把一个字符串动态的添加到展示盒子中，其中的空格也要原样输出，所以用 标签可以渲染空格。2.动态生成代码与皮卡丘 style我们利用到 setInterval 来进行待输入 code 的匹配进去。把 code 逐个的输入 code 展示盒子， 和 style 标签。我们尽量把绘制生成的代码放到一个函数中方便下一步的控制速度的调用。let id = null; function doIt(speed) { function writeCode(pre, code, fn) { let codeWrapper = document.querySelector(&quot;#code&quot;); let style = document.querySelector(&quot;#styleTag&quot;); let n = 0; id = setInterval(() =&gt; { n += 1; codeWrapper.innerHTML = code.substring(0, n); style.innerHTML = code.substring(0, n); codeWrapper.scrollTop = codeWrapper.scrollHeight; if (n &gt;= code.length) { window.clearInterval(id); fn &amp;&amp; fn(); } }, speed); } let code = ` /* *首先准备皮卡丘的皮 */ .wrapper { width: 100%; height: 220px; position: relative; } /* *下一步，准备皮卡丘的鼻子 */ .nose { width: 0; height: 0; border: 11px solid red; border-radius: 12px; border-color: black transparent transparent transparent; position: absolute; left: 50%; top: 28px; transform: translate(-12px); } /* *下一步，准备皮卡丘的眼睛 */ .eye { width: 49px; height: 49px; background-color: #2e2e2e; border-radius: 50%; position: absolute; border: 2px solid #000; } .eye::before { content: &quot;&quot;; display: block; width: 24px; height: 24px; background-color: white; position: absolute; border-radius: 50%; left: 6px; top: -1px; border: 2px solid #000; } .eye.left { right: 50%; margin-right: 90px; } .eye.right { left: 50%; margin-left: 90px; } /* *下一步，准备皮卡丘的脸颊 */ .face { width: 65px; height: 68px; background-color: #f92726; border: 2px solid black; border-radius: 50%; position: absolute; top: 85px; } .face.left { right: 50%; margin-right: 116px; } .face.right { left: 50%; margin-left: 116px; } /* *下一步，准备皮卡丘的上唇 */ .upperLip { height: 20px; width: 80px; border: 3px solid black; position: absolute; top: 52px; background-color: yellow; z-index: 1; } .upperLip.left { border-bottom-left-radius: 40px 20px; border-top: none; border-right: none; transform: rotate(-20deg); right: 50%; } .upperLip.right { left: 50%; border-bottom-right-radius: 40px 20px; border-top: none; border-left: none; transform: rotate(20deg); } /* *下一步，准备皮卡丘的下唇 */ .lowerLip-wrapper { width: 120px; height: 130px; position: absolute; left: 50%; margin-left: -60px; margin-top: 56px; overflow: hidden; } .lowerLip { height: 1000px; width: 120px; border-radius: 200px/800px; border: 2px solid black; background-color: #971818; position: absolute; bottom: 0; overflow: hidden; } /* *下一步，准备皮卡丘的舌头 */ .tongue { width: 100px; height: 100px; border-radius: 50px; left: 8px; background-color: #f95364; position: absolute; bottom: 0; z-index: 2; } `; writeCode(&quot;&quot;, code); } doIt(15); let up = document.querySelector(&quot;#speedUp&quot;); let down = document.querySelector(&quot;#speedDown&quot;); let reset = document.querySelector(&quot;#reset&quot;); up.addEventListener(&quot;click&quot;, () =&gt; { window.clearInterval(id); doIt(2); }); down.addEventListener(&quot;click&quot;, () =&gt; { window.clearInterval(id); doIt(30); }); reset.addEventListener(&quot;click&quot;, () =&gt; { window.clearInterval(id); doIt(15); }); 3.实现速度的控制这一个就很简单了，我们只需要监听事件传入不同的参数就可以了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web前端","slug":"web前端","permalink":"/tags/web前端/"},{"name":"前端项目","slug":"前端项目","permalink":"/tags/前端项目/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"画一只会动的皮卡丘(上）","slug":"pKaQiu","date":"2020-07-14T14:05:37.000Z","updated":"2020-07-14T14:12:33.327Z","comments":true,"path":"2020/07/14/pKaQiu/","link":"","permalink":"/2020/07/14/pKaQiu/","excerpt":"","text":"实现的皮卡丘样式如下图：本篇内容 List：tip1--全局样式初始化，配置 tip2--实现鼻子 tip3--实现眼睛 tip4--实现脸颊 tip5--嘴巴实现 1.先进行页面整体的样式配置这里我们要在手机端展示，所以我们尽量整个图形的宽度要小于手机屏幕的最小宽度，代码如下：* { margin: 0; padding: 0; box-sizing: border-box; } *::before { margin: 0; padding: 0; box-sizing: border-box; } *::after { margin: 0; padding: 0; box-sizing: border-box; } //设置body样式使内容居中等 body { width: 100%; height: 100vh; background-color: yellow; border: 1px solid green; display: flex; justify-content: center; align-items: center; } //为我们需要画图的主体区域 .wrapper { width: 100%; height: 220px; position: relative; } 2.鼻子的绘画利用一个 div 盒子宽高等于 0，然后给予边宽来撑大盒子，再取消不需要的边框，就可以实现一个圆饼的效果，代码如下.nose { width: 0; height: 0; border: 11px solid red; border-radius: 12px; border-color: black transparent transparent transparent; position: absolute; left: 50%; top: 28px; transform: translate(-12px); } 3.眼睛的绘画我们把相同的眼睛代码写在一个 class 中，左右眼不同的样式分别写类名来控制，在测量的时候我们可以以最中间的鼻子基准来写代码，代码如下；.eye { width: 49px; height: 49px; background-color: #2e2e2e; border-radius: 50%; position: absolute; border: 2px solid #000; } .eye::before { content: &quot;&quot;; display: block; width: 24px; height: 24px; background-color: white; position: absolute; border-radius: 50%; left: 6px; top: -1px; border: 2px solid #000; } .eye.left { right: 50%; margin-right: 90px; } .eye.right { left: 50%; margin-left: 90px; } 3.脸颊的绘画脸颊的绘画不难，我们需要准确测量位置，代码如下：.face { width: 65px; height: 68px; background-color: #f92726; border: 2px solid black; border-radius: 50%; position: absolute; top: 85px; } .face.left { right: 50%; margin-right: 116px; } .face.right { left: 50%; margin-left: 116px; } 4.嘴的绘画为了实现舌头，结构图如下； 代码如下：.upperLip { height: 20px; width: 80px; border: 3px solid black; position: absolute; top: 52px; background-color: yellow; z-index: 1; } .upperLip.left { border-bottom-left-radius: 40px 20px; border-top: none; border-right: none; transform: rotate(-20deg); right: 50%; } .upperLip.right { left: 50%; border-bottom-right-radius: 40px 20px; border-top: none; border-left: none; transform: rotate(20deg); } .lowerLip-wrapper { width: 120px; height: 130px; position: absolute; left: 50%; margin-left: -60px; margin-top: 56px; overflow: hidden; } .lowerLip { height: 1000px; width: 120px; border-radius: 200px/800px; border: 2px solid black; background-color: #971818; position: absolute; bottom: 0; overflow: hidden; } .tongue { width: 100px; height: 100px; border-radius: 50px; left: 8px; background-color: #f95364; position: absolute; bottom: 0; z-index: 2; } 以上就可实现一个皮卡丘了，现附上整个静态皮卡丘代码：&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; * { margin: 0; padding: 0; box-sizing: border-box; } *::before { margin: 0; padding: 0; box-sizing: border-box; } *::after { margin: 0; padding: 0; box-sizing: border-box; } body { width: 100%; height: 100vh; background-color: yellow; border: 1px solid green; display: flex; justify-content: center; align-items: center; } .wrapper { width: 100%; height: 220px; position: relative; } .nose { width: 0; height: 0; border: 11px solid red; border-radius: 12px; border-color: black transparent transparent transparent; position: absolute; left: 50%; top: 28px; transform: translate(-12px); } .eye { width: 49px; height: 49px; background-color: #2E2E2E; border-radius: 50%; position: absolute; border: 2px solid #000; } .eye::before { content: &#39;&#39;; display: block; width: 24px; height: 24px; background-color: white; position: absolute; border-radius: 50%; left: 6px; top: -1px; border: 2px solid #000; } .eye.left { right: 50%; margin-right: 90px } .eye.right { left: 50%; margin-left: 90px } .face { width: 65px; height: 68px; background-color: #f92726; border: 2px solid black; border-radius: 50%; position: absolute; top: 85px; } .face.left { right: 50%; margin-right: 116px; } .face.right { left: 50%; margin-left: 116px; } .upperLip { height: 20px; width: 80px; border: 3px solid black; position: absolute; top: 52px; background-color: yellow; z-index: 1; } .upperLip.left { border-bottom-left-radius: 40px 20px; border-top: none; border-right: none; transform: rotate(-20deg); right: 50%; } .upperLip.right { left: 50%; border-bottom-right-radius: 40px 20px; border-top: none; border-left: none; transform: rotate(20deg); } .lowerLip-wrapper { width: 120px; height: 130px; position: absolute; left: 50%; margin-left: -60px; margin-top: 56px; overflow: hidden; } .lowerLip { height: 1000px; width: 120px; border-radius: 200px/800px; border: 2px solid black; background-color: #971818; position: absolute; bottom: 0; overflow: hidden } .tongue { width: 100px; height: 100px; border-radius: 50px; left: 8px; background-color: #f95364; position: absolute; bottom: 0; z-index: 2; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;nose&quot;&gt; &lt;/div&gt; &lt;div class=&quot;eye left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;eye right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;upperLip left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;upperLip right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;lowerLip-wrapper&quot;&gt; &lt;div class=&quot;lowerLip&quot;&gt; &lt;div class=&quot;tongue&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web前端","slug":"web前端","permalink":"/tags/web前端/"},{"name":"前端项目","slug":"前端项目","permalink":"/tags/前端项目/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"vueUI轮子（上）","slug":"vueUi01","date":"2020-07-14T08:03:27.000Z","updated":"2020-07-14T08:06:22.039Z","comments":true,"path":"2020/07/14/vueUi01/","link":"","permalink":"/2020/07/14/vueUi01/","excerpt":"","text":"1.需求分析用例图，状态分析 2.UI 设计我们用 SKetch 进行 ui 的设计。可以利用 symbol 来绑定关联等详细操作就不赘述了，设计效果如下图 3.项目初始化1.先在github上建立gulu仓库，本地电脑创建项目，关联到远程仓库 2.创建README.md 和 LICENSE许可证（许可证可在github上进行创建，具体创建的类型可以看阮一峰老师的经典图） 3.npm init 来简化项目的传输等，记载项目依赖，此时可以进行提交但node_modules依赖包过大，可以创建.gitignore文件进行不上传指定文件 4.这里我们利用parcel来进行构建项目，这里我们进行-D安装，所以在执行命令时需要~.node_modules/.bin/parcel~来找到本地安装的指令才可以进行打包。 出现的问题： （You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.）这是由于vue版本不兼容的原因，我们可以上vue官网找到解决办法 4.button 基础样式实现用到了变量方便用户进行修改样式，css 使用 scss//scss// * { margin: 0; padding: 0; box-sizing: border-box; } :root { //表示根html， 也可以写其他的选择器，在选择器中生效 --button-height: 32px; --font-size: 14px; --button-bg: white; --button-active-bg: #eee; --border-radius: 4px; --color: #333; --border-color: #999; --border-color-hover: #666; } #app { margin: 20px; } body { font-size: var(--font-size); } .g-button { font-size: var(--font-size); height: var(--button-height); padding: 0 1em; border-radius: var(--border-radius); border: 1px solid var(--border-color); background-color: var(--button-bg); &amp;:hover { border-color: var(--border-color-hover); } &amp;:active { background-color: var(--button-active-bg); } &amp;:focus { outline: none; } } 5.实现按钮添加字体图标1.去阿里巴巴图标库进行，图标的添加，利用图标库的 symbol 模式，使用方法可以参考图标库的文档。在图标库中可以进行项目编辑前缀名，批量操做图标的颜色，每个图标大小和名字。2.让用户添加属性的方式添加字体图标，具体在组件中进行编写，还添加了 icon-position 属性，让用户自定义图标的左右位置。还需要进行用户传入属性的验证在 props 中 validator 进行验证给与用户提示信息。3.把 svg 整合到 icon.vue 中，实现用户可以调用 icon 组件为按钮添加 loading 样式1.我们先添加 loading 这一个图标，然后在 button 组件中对这个图标进行旋转利用到关键帧动画，在 icon 添加 class 实现 2.然后进行一些逻辑，包括 loading 与 icon 交替显示问题， 3.为按钮添加事件，由于我们用户要动态绑定 loading 属性到 g-button 上，所以我们只需要让 vue 动态追踪就可以了。但是–出现一个问题： 由于我们按钮组件是自定义的，当用户在组件上绑定点击事件时，浏览器判断不出点击哪里会触发用户定义的点击事件，所以我们需要在组件中自己来找到触发的位置，如下图： 4.button-group 组件实现效果如下： button-group 代码如下&lt;template&gt; &lt;div class=&quot;g-button-group&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default {}; &lt;/script&gt; &lt;style scoped lang=&quot;scss&quot;&gt; .g-button-group { display: inline; .g-button { border-radius: 0 !important; margin-left: -1px; //结局边框加深问题t1， 此时代码可以优化，选择器为不是第一个时候添加 &amp;:first-child { border-top-left-radius: var(--border-radius) !important; border-bottom-left-radius: var(--border-radius) !important; } &amp;:last-child { border-top-right-radius: var(--border-radius) !important; border-bottom-right-radius: var(--border-radius) !important; } &amp;:hover { //结局边框加深问题t2 position: relative; z-index: 1; } } } &lt;/style&gt; 单元测试我们为了检测一个作用明确的单元是否功能正常，我们进行单元测试，即利用代码的方式进行测试，代替了手动测试方式。这样结果更具有准确性。即 测试行为—&gt;结果。 用到了 Chai 这个库其中的期待和间谍 import chai from &#39;chai&#39; import spies from &#39;chai-spies&#39; chai.use(spies) Vue.component(&#39;g-button-group&#39;, ButtonGroup) const expect = chai.expect new Vue({ { el: &#39;#app&#39;, const Constructor = Vue.extend(Button) data: { const vm = new Constructor({ loading1: false, propsData: { loading2: true, icon: &#39;settings&#39; } } }) }).$mount() const useElement = vm.$el.querySelector(&#39;use&#39;) expect(useElement.getAttribute(&#39;xlink:href&#39;)).to.equal(&#39;#i-settings&#39;) vm.$destroy() } { const Constructor = Vue.extend(Button) const vm = new Constructor({ propsData: { icon: &#39;settings&#39;, loading: true } }).$mount() const useElements = vm.$el.querySelectorAll(&#39;use&#39;) expect(useElements.length).to.equal(1) expect(useElements[0].getAttribute(&#39;xlink:href&#39;)).to.equal(&#39;#i-loading&#39;) vm.$destroy() } { const div = document.createElement(&#39;div&#39;) document.body.appendChild(div) const Constructor = Vue.extend(Button) const vm = new Constructor({ propsData: { icon: &#39;settings&#39;, } }).$mount(div) const icon = vm.$el.querySelector(&#39;svg&#39;) expect(getComputedStyle(icon).order).to.eq(&#39;1&#39;) vm.$el.remove() vm.$destroy() } { const div = document.createElement(&#39;div&#39;) document.body.appendChild(div) const Constructor = Vue.extend(Button) const vm = new Constructor({ propsData: { icon: &#39;settings&#39;, iconPosition: &#39;right&#39; } }).$mount(div) const icon = vm.$el.querySelector(&#39;svg&#39;) expect(getComputedStyle(icon).order).to.eq(&#39;2&#39;) vm.$el.remove() vm.$destroy() } { const Constructor = Vue.extend(Button) const vm = new Constructor({ propsData: { icon: &#39;settings&#39;, } }).$mount() const spy = chai.spy(() =&gt; {}) console.log(&#39;hi&#39;) vm.$on(&#39;click&#39;, spy) }) vm.$el.click() vm.$el.click() expect(spy).to.have.been.called() } } }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web前端","slug":"web前端","permalink":"/tags/web前端/"},{"name":"前端项目","slug":"前端项目","permalink":"/tags/前端项目/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2020-07-14T09:21:05.476Z","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"/2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura 主题 English document 基于 WordPress 主题Sakura修改成 Hexo 的主题。 demo 预览 正在开发中…… 交流群若你是使用者，加群 QQ: 801511924 若你是创作者，加群 QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine 评论 fancy-box 相册 pjax 支持，音乐不间断 aplayer 音乐播放器 多级导航菜单（按现在大部分 hexo 主题来说，这也算是个特性了） 赞赏作者如果喜欢 hexo-theme-sakura 主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理 233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些 source 的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config 配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用 hexo b 发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config 配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: { path: /categories/技术/, fa: fa-code }, 生活: { path: /categories/生活/, fa: fa-file-text-o }, 资源: { path: /categories/资源/, fa: fa-cloud-download }, 随想: { path: /categories/随想/, fa: fa-commenting-o }, 转载: { path: /categories/转载/, fa: fa-book }, }, } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: { path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: { path: /bangumi/, fa: fa-film faa-vertical }, 歌单: { path: /music/, fa: fa-headphones }, 图集: { path: /tags/图集/, fa: fa-photo }, }, } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench, submenus: { 我？: { path: /about/, fa: fa-meetup }, 主题: { path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: { path: /lab/, fa: fa-cogs }, }, } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - { url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png, } - { url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg, } - { url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg, } # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: { url: http://github.com/honjun, img: /img/social/github.png } sina: { url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png } wangyiyun: { url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png } zhihu: { url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png } email: { url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg } wechat: { url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png } # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: { url: http://github.com/honjun, fa: fa-github, color: 333 } weibo: { url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39 } qq: { url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe, } # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml 里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把 404 图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以 issue 或群里提出来），现在是没设置的话会使用那种倒立小狗 404 哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于 source 下的 comment 下，打开 index.md 如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件 hexo-tag-bili 和 hexo-tag-fancybox_img。其中 hexo-tag-bili 用来在文章或单页面中插入 B 站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img 用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}]}]}